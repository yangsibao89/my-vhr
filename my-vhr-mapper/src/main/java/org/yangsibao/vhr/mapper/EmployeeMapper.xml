<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.yangsibao.vhr.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="org.yangsibao.vhr.model.Employee">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="CHAR"/>
        <result column="birthday" property="birthday" jdbcType="DATE"/>
        <result column="idCard" property="idCard" jdbcType="CHAR"/>
        <result column="wedlock" property="wedlock" jdbcType="CHAR"/>
        <result column="nationId" property="nationId" jdbcType="INTEGER"/>
        <result column="nativePlace" property="nativePlace" jdbcType="VARCHAR"/>
        <result column="politicId" property="politicId" jdbcType="INTEGER"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="departmentId" property="departmentId" jdbcType="INTEGER"/>
        <result column="jobLevelId" property="jobLevelId" jdbcType="INTEGER"/>
        <result column="posId" property="posId" jdbcType="INTEGER"/>
        <result column="engageForm" property="engageForm" jdbcType="VARCHAR"/>
        <result column="tiptopDegree" property="tiptopDegree" jdbcType="CHAR"/>
        <result column="specialty" property="specialty" jdbcType="VARCHAR"/>
        <result column="school" property="school" jdbcType="VARCHAR"/>
        <result column="beginDate" property="beginDate" jdbcType="DATE"/>
        <result column="workState" property="workState" jdbcType="CHAR"/>
        <result column="workID" property="workID" jdbcType="CHAR"/>
        <result column="contractTerm" property="contractTerm" jdbcType="DOUBLE"/>
        <result column="conversionTime" property="conversionTime" jdbcType="DATE"/>
        <result column="notWorkDate" property="notWorkDate" jdbcType="DATE"/>
        <result column="beginContract" property="beginContract" jdbcType="DATE"/>
        <result column="endContract" property="endContract" jdbcType="DATE"/>
        <result column="workAge" property="workAge" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="AllEmployeeInfo" type="org.yangsibao.vhr.model.Employee" extends="BaseResultMap">
        <association property="nation" javaType="org.yangsibao.vhr.model.Nation">
            <id column="nid" property="id"/>
            <result column="nname" property="name"/>
        </association>
        <association property="politicsstatus" javaType="org.yangsibao.vhr.model.Politicsstatus">
            <id column="pid" property="id"/>
            <result column="pname" property="name"/>
        </association>
        <association property="department" javaType="org.yangsibao.vhr.model.Department">
            <id column="did" property="id"/>
            <result column="dname" property="name"/>
        </association>
        <association property="jobLevel" javaType="org.yangsibao.vhr.model.JobLevel">
            <id column="jid" property="id"/>
            <result column="jname" property="name"/>
        </association>
        <association property="position" javaType="org.yangsibao.vhr.model.Position">
            <id column="posid" property="id"/>
            <result column="posname" property="name"/>
        </association>
    </resultMap>

    <resultMap id="EmployeeWithSalaryFull" type="org.yangsibao.vhr.model.Employee" extends="BaseResultMap">
        <association property="salaryFull" javaType="org.yangsibao.vhr.model.SalaryFull">
            <id column="sid" property="id" jdbcType="INTEGER"/>
            <result column="sname" property="name" jdbcType="VARCHAR"/>
            <result column="sbasicWage" property="basicwage" jdbcType="INTEGER"/>
            <result column="sseniorityWage" property="senioritywage" jdbcType="INTEGER"/>
            <result column="spositionWage" property="positionwage" jdbcType="INTEGER"/>
            <result column="sperformanceWage" property="performancewage" jdbcType="INTEGER"/>
            <result column="sphoneAllowance" property="phoneallowance" jdbcType="INTEGER"/>
            <result column="strafficAllowance" property="trafficallowance" jdbcType="INTEGER"/>
            <result column="sregistAllowance" property="registallowance" jdbcType="INTEGER"/>
            <result column="sregistSupply" property="registsupply" jdbcType="INTEGER"/>
            <result column="srentAllowance" property="registallowance" jdbcType="INTEGER"/>
            <result column="srentSupply" property="rentsupply" jdbcType="INTEGER"/>
            <result column="saloneAllowance" property="aloneallowance" jdbcType="INTEGER"/>
            <result column="saloneSupply" property="alonesupply" jdbcType="INTEGER"/>
            <result column="shui" property="hui" jdbcType="INTEGER"/>
            <result column="sfire" property="fire" jdbcType="INTEGER"/>
            <result column="scool" property="cool" jdbcType="INTEGER"/>
            <result column="spropertyAllowance" property="propertyallowance" jdbcType="INTEGER"/>
            <result column="swarmAllowance" property="warmallowance" jdbcType="INTEGER"/>
            <result column="swarmSupply" property="warmsupply" jdbcType="INTEGER"/>
            <result column="spropertySupply" property="propertysupply" jdbcType="INTEGER"/>
            <result column="ssupply" property="supply" jdbcType="INTEGER"/>
            <result column="sdeduction" property="deduction" jdbcType="INTEGER"/>
            <result column="ssickPersonalLeave" property="sickpersonalleave" jdbcType="INTEGER"/>
            <result column="ssum" property="sum" jdbcType="INTEGER"/>
            <result column="spension" property="pension" jdbcType="INTEGER"/>
            <result column="slargeMedical" property="largemedical" jdbcType="INTEGER"/>
            <result column="soccupationalAnnuity" property="occupationalannuity" jdbcType="INTEGER"/>
            <result column="sprovident" property="provident" jdbcType="INTEGER"/>
            <result column="soccupationalAnnuityDecuction" property="occupationalannuitydecuction" jdbcType="INTEGER"/>
            <result column="slargeMedicalDeduction" property="largemedicaldeduction" jdbcType="INTEGER"/>
            <result column="spensionBack" property="pensionback" jdbcType="INTEGER"/>
            <result column="sinsuranceDeduction" property="insurancededuction" jdbcType="INTEGER"/>
            <result column="ssumDeduction" property="sumdeduction" jdbcType="INTEGER"/>
            <result column="sprovidentBack" property="providentback" jdbcType="INTEGER"/>
            <result column="sprovidentDeduction" property="providentdeduction" jdbcType="INTEGER"/>
            <result column="smember" property="member" jdbcType="INTEGER"/>
            <result column="sindividual" property="individual" jdbcType="INTEGER"/>
            <result column="sactualSum" property="actualsum" jdbcType="INTEGER"/>
            <result column="sagencySum" property="agencysum" jdbcType="INTEGER"/>
            <result column="sdeductionSum" property="deductionsum" jdbcType="INTEGER"/>
            <result column="srepay" property="repay" jdbcType="INTEGER"/>
            <result column="sactualWage" property="actualwage" jdbcType="INTEGER"/>
            <result column="saddProvidentBack" property="addprovidentback" jdbcType="INTEGER"/>
            <result column="stotal" property="total" jdbcType="INTEGER"/>
            <result column="sbase" property="base" jdbcType="INTEGER"/>
            <result column="spensionPersonalPer" property="pensionpersonalper" jdbcType="DOUBLE"/>
            <result column="spensionUnitPer" property="pensionunitper" jdbcType="DOUBLE"/>
            <result column="spensionSumPer" property="pensionsumper" jdbcType="DOUBLE"/>
            <result column="smedicalPersonalPer" property="medicalpersonalper" jdbcType="DOUBLE"/>
            <result column="smedicalUnitPer" property="medicalunitper" jdbcType="DOUBLE"/>
            <result column="smedicalSumPer" property="medicalsumper" jdbcType="DOUBLE"/>
            <result column="sjoblessPersonalPer" property="joblesspersonalper" jdbcType="DOUBLE"/>
            <result column="sjoblessUnitPer" property="joblessunitper" jdbcType="DOUBLE"/>
            <result column="sjoblessSumPer" property="joblesssumper" jdbcType="DOUBLE"/>
            <result column="sinjury" property="injury" jdbcType="DOUBLE"/>
            <result column="sbirth" property="birth" jdbcType="DOUBLE"/>
            <result column="spersonalDeduction" property="personaldeduction" jdbcType="INTEGER"/>
            <result column="silargeMedical" property="ilargemedical" jdbcType="INTEGER"/>
            <result column="sunitSum" property="unitsum" jdbcType="INTEGER"/>
            <result column="smonth" property="month" jdbcType="INTEGER"/>
            <result column="spbase" property="pbase" jdbcType="INTEGER"/>
            <result column="sper" property="per" jdbcType="INTEGER"/>
            <result column="spersonal" property="personal" jdbcType="INTEGER"/>
            <result column="sunit" property="unit" jdbcType="INTEGER"/>
            <result column="spmonth" property="pmonth" jdbcType="INTEGER"/>
            <result column="sback" property="back" jdbcType="INTEGER"/>
            <result column="sptotal" property="ptotal" jdbcType="INTEGER"/>
            <result column="sbonus" property="bonus" jdbcType="INTEGER"/>
            <result column="sallSalary" property="allsalary" jdbcType="INTEGER"/>
            <result column="screateDate" property="createdate" jdbcType="TIMESTAMP"/>
            <result column="sissueDate" property="issuedate" jdbcType="TIMESTAMP"/>
        </association>
        <association property="department" javaType="org.yangsibao.vhr.model.Department">
            <result column="dname" property="name"/>
        </association>
    </resultMap>

    <sql id="Base_Column_List">
        id, name, gender, birthday, idCard, wedlock, nationId, nativePlace, politicId, email,
        phone, address, departmentId, jobLevelId, posId, engageForm, tiptopDegree, specialty,
        school, beginDate, workState, workID, contractTerm, conversionTime, notWorkDate,
        beginContract, endContract, workAge
    </sql>

    <select id="maxWorkID" resultType="java.lang.Integer">
        select max(workID) from employee
    </select>

    <select id="getEmployeeByPageWithSalary" resultMap="EmployeeWithSalaryFull">
        SELECT
        e.*,
        d.`name` AS dname,
        s.`id` AS sid,
        s.`name` AS sname,
        s.basicWage AS sbasicWage,
        s.seniorityWage AS sseniorityWage,
        s.positionWage AS spositionWage,
        s.performanceWage AS sperformanceWage,
        s.`phoneAllowance` AS sphoneAllowance,
        s.`trafficAllowance` AS strafficAllowance,
        s.`registAllowance` AS sregistAllowance,
        s.`registSupply` AS sregistSupply,
        s.`rentAllowance` AS srentAllowance,
        s.`rentSupply` AS srentSupply,
        s.`aloneAllowance` AS saloneAllowance,
        s.`aloneSupply` AS saloneSupply,
        s.`hui` AS shui,
        s.`fire` AS sfire,
        s.`cool` AS scool,
        s.`propertyAllowance` AS spropertyAllowance,
        s.`warmAllowance` AS swarmAllowance,
        s.`warmSupply` AS swarmSupply,
        s.`propertySupply` AS spropertySupply,
        s.`supply` AS ssupply,
        s.`deduction` AS sdeduction,
        s.`sickPersonalLeave` AS ssickPersonalLeave,
        s.`sum` AS ssum,
        s.`pension` AS spension,
        s.`largeMedical` AS slargeMedical,
        s.`occupationalAnnuity` AS soccupationalAnnuity,
        s.`provident` AS sprovident,
        s.`occupationalAnnuityDecuction` AS soccupationalAnnuityDecuction,
        s.`largeMedicalDeduction` AS slargeMedicalDeduction,
        s.`pensionBack` AS spensionBack,
        s.`insuranceDeduction` AS sinsuranceDeduction,
        s.`sumDeduction` AS ssumDeduction,
        s.`providentBack` AS sprovidentBack,
        s.`providentDeduction` AS sprovidentDeduction,
        s.`member` AS smember,
        s.`individual` AS sindividual,
        s.`actualSum` AS sactualSum,
        s.`agencySum` AS sagencySum,
        s.`deductionSum` AS sdeductionSum,
        s.`repay` AS srepay,
        s.`actualWage` AS sactualWage,
        s.`addProvidentBack` AS saddProvidentBack,
        s.`total` AS stotal,
        s.`base` AS sbase,
        s.`pensionPersonalPer` AS spensionPersonalPer,
        s.`pensionUnitPer` AS spensionUnitPer,
        s.`pensionSumPer` AS spensionSumPer,
        s.`medicalPersonalPer` AS smedicalPersonalPer,
        s.`medicalUnitPer` AS smedicalUnitPer,
        s.`medicalSumPer` AS smedicalSumPer,
        s.`joblessPersonalPer` AS sjoblessPersonalPer,
        s.`joblessUnitPer` AS sjoblessUnitPer,
        s.`joblessSumPer` AS sjoblessSumPer,
        s.`injury` AS sinjury,
        s.`birth` AS sbirth,
        s.`personalDeduction` AS spersonalDeduction,
        s.`ilargeMedical` AS silargeMedical,
        s.`unitSum` AS sunitSum,
        s.`month` AS smonth,
        s.`pbase` AS spbase,
        s.`per` AS sper,
        s.`personal` AS spersonal,
        s.`unit` AS sunit,
        s.`pmonth` AS spmonth,
        s.`back` AS sback,
        s.`ptotal` AS sptotal,
        s.`bonus` AS sbonus,
        s.`allSalary` AS sallSalary,
        s.`createDate` AS screateDate,
        s.`issueDate` AS sissueDate
        FROM
        employee e
        LEFT JOIN empsalary es ON e.`id` = es.`eid`
        LEFT JOIN salary_full s ON es.`sid` = s.`id`
        LEFT JOIN department d ON e.`departmentId` = d.`id`
        ORDER BY
        e.id
        <if test="page !=null and size !=null">
            limit #{page},#{size}
        </if>
    </select>

    <insert id="updateEmployeeSalaryById">
        REPLACE INTO empsalary (eid,sid) VALUES(#{eid},#{sid})
    </insert>

    <select id="getEmployeeById" resultMap="AllEmployeeInfo">
        select e.*,p.`id` as pid,p.`name` as pname,n.`id` as nid,n.`name` as nname,d.`id` as did,d.`name` as
        dname,j.`id` as jid,j.`name` as jname,pos.`id` as posid,pos.`name` as posname from employee e,nation
        n,politicsstatus p,department d,joblevel j,position pos where e.`nationId`=n.`id` and e.`politicId`=p.`id` and
        e.`departmentId`=d.`id` and e.`jobLevelId`=j.`id` and e.`posId`=pos.`id` and e.`id`=#{id}
    </select>

    <select id="getEmployeeByPage" resultMap="AllEmployeeInfo">
        select e.*,p.`id` as pid,p.`name` as pname,n.`id` as nid,n.`name` as nname,d.`id` as did,d.`name` as
        dname,j.`id` as jid,j.`name` as jname,pos.`id` as posid,pos.`name` as posname from employee e,nation
        n,politicsstatus p,department d,joblevel j,position pos where e.`nationId`=n.`id` and e.`politicId`=p.`id` and
        e.`departmentId`=d.`id` and e.`jobLevelId`=j.`id` and e.`posId`=pos.`id`
        <if test="emp.name !=null and emp.name!=''">
            and e.name like concat('%',#{emp.name},'%')
        </if>
        <if test="emp.politicId !=null">
            and e.politicId =#{emp.politicId}
        </if>
        <if test="emp.nationId !=null">
            and e.nationId =#{emp.nationId}
        </if>
        <if test="emp.departmentId !=null">
            and e.departmentId =#{emp.departmentId}
        </if>
        <if test="emp.jobLevelId !=null">
            and e.jobLevelId =#{emp.jobLevelId}
        </if>
        <if test="emp.engageForm !=null and emp.engageForm!=''">
            and e.engageForm =#{emp.engageForm}
        </if>
        <if test="emp.posId !=null">
            and e.posId =#{emp.posId}
        </if>
        <if test="beginDateScope !=null">
            and e.beginDate between #{beginDateScope[0]} and #{beginDateScope[1]}
        </if>
        <if test="page !=null and size!=null">
            limit #{page},#{size}
        </if>
    </select>

    <select id="getTotal" resultType="java.lang.Long">
        select count(*) from employee e
        <where>
            <if test="emp!=null">
                <if test="emp.name !=null and emp.name!=''">
                    and e.name like concat('%',#{emp.name},'%')
                </if>
                <if test="emp.politicId !=null">
                    and e.politicId =#{emp.politicId}
                </if>
                <if test="emp.nationId !=null">
                    and e.nationId =#{emp.nationId}
                </if>
                <if test="emp.jobLevelId !=null">
                    and e.jobLevelId =#{emp.jobLevelId}
                </if>
                <if test="emp.departmentId !=null">
                    and e.departmentId =#{emp.departmentId}
                </if>
                <if test="emp.engageForm !=null and emp.engageForm!=''">
                    and e.engageForm =#{emp.engageForm}
                </if>
                <if test="emp.posId !=null">
                    and e.posId =#{emp.posId}
                </if>
            </if>
            <if test="beginDateScope !=null">
                and e.beginDate between #{beginDateScope[0]} and #{beginDateScope[1]}
            </if>
        </where>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from employee
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from employee
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="addEmps">
        insert into employee (name, gender,
        birthday, idCard, wedlock, nationId,
        nativePlace, politicId, email,
        phone, address, departmentId,
        jobLevelId, posId, engageForm,
        tiptopDegree, specialty, school,
        beginDate, workState, workID,
        contractTerm, conversionTime, notWorkDate,
        beginContract, endContract, workAge
        )
        values
        <foreach collection="list" separator="," item="emp">
            (#{emp.name,jdbcType=VARCHAR}, #{emp.gender,jdbcType=CHAR},
            #{emp.birthday,jdbcType=DATE}, #{emp.idCard,jdbcType=CHAR}, #{emp.wedlock,jdbcType=CHAR},
            #{emp.nationId,jdbcType=INTEGER},
            #{emp.nativePlace,jdbcType=VARCHAR}, #{emp.politicId,jdbcType=INTEGER}, #{emp.email,jdbcType=VARCHAR},
            #{emp.phone,jdbcType=VARCHAR}, #{emp.address,jdbcType=VARCHAR}, #{emp.departmentId,jdbcType=INTEGER},
            #{emp.jobLevelId,jdbcType=INTEGER}, #{emp.posId,jdbcType=INTEGER}, #{emp.engageForm,jdbcType=VARCHAR},
            #{emp.tiptopDegree,jdbcType=CHAR}, #{emp.specialty,jdbcType=VARCHAR}, #{emp.school,jdbcType=VARCHAR},
            #{emp.beginDate,jdbcType=DATE}, #{emp.workState,jdbcType=CHAR}, #{emp.workID,jdbcType=CHAR},
            #{emp.contractTerm,jdbcType=DOUBLE}, #{emp.conversionTime,jdbcType=DATE}, #{emp.notWorkDate,jdbcType=DATE},
            #{emp.beginContract,jdbcType=DATE}, #{emp.endContract,jdbcType=DATE}, #{emp.workAge,jdbcType=INTEGER}
            )
        </foreach>
    </insert>

    <insert id="insert" parameterType="org.yangsibao.vhr.model.Employee">
        insert into employee (id, name, gender,
          birthday, idCard, wedlock, nationId,
          nativePlace, politicId, email,
          phone, address, departmentId,
          jobLevelId, posId, engageForm,
          tiptopDegree, specialty, school,
          beginDate, workState, workID,
          contractTerm, conversionTime, notWorkDate,
          beginContract, endContract, workAge
          )
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{gender,jdbcType=CHAR},
          #{birthday,jdbcType=DATE}, #{idCard,jdbcType=CHAR}, #{wedlock,jdbcType=CHAR}, #{nationId,jdbcType=INTEGER},
          #{nativePlace,jdbcType=VARCHAR}, #{politicId,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR},
          #{phone,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{departmentId,jdbcType=INTEGER},
          #{jobLevelId,jdbcType=INTEGER}, #{posId,jdbcType=INTEGER}, #{engageForm,jdbcType=VARCHAR},
          #{tiptopDegree,jdbcType=CHAR}, #{specialty,jdbcType=VARCHAR}, #{school,jdbcType=VARCHAR},
          #{beginDate,jdbcType=DATE}, #{workState,jdbcType=CHAR}, #{workID,jdbcType=CHAR},
          #{contractTerm,jdbcType=DOUBLE}, #{conversionTime,jdbcType=DATE}, #{notWorkDate,jdbcType=DATE},
          #{beginContract,jdbcType=DATE}, #{endContract,jdbcType=DATE}, #{workAge,jdbcType=INTEGER}
          )
    </insert>

    <insert id="insertSelective" parameterType="org.yangsibao.vhr.model.Employee" useGeneratedKeys="true"
            keyProperty="id">
        insert into employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="birthday != null">
                birthday,
            </if>
            <if test="idCard != null">
                idCard,
            </if>
            <if test="wedlock != null">
                wedlock,
            </if>
            <if test="nationId != null">
                nationId,
            </if>
            <if test="nativePlace != null">
                nativePlace,
            </if>
            <if test="politicId != null">
                politicId,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="departmentId != null">
                departmentId,
            </if>
            <if test="jobLevelId != null">
                jobLevelId,
            </if>
            <if test="posId != null">
                posId,
            </if>
            <if test="engageForm != null">
                engageForm,
            </if>
            <if test="tiptopDegree != null">
                tiptopDegree,
            </if>
            <if test="specialty != null">
                specialty,
            </if>
            <if test="school != null">
                school,
            </if>
            <if test="beginDate != null">
                beginDate,
            </if>
            <if test="workState != null">
                workState,
            </if>
            <if test="workID != null">
                workID,
            </if>
            <if test="contractTerm != null">
                contractTerm,
            </if>
            <if test="conversionTime != null">
                conversionTime,
            </if>
            <if test="notWorkDate != null">
                notWorkDate,
            </if>
            <if test="beginContract != null">
                beginContract,
            </if>
            <if test="endContract != null">
                endContract,
            </if>
            <if test="workAge != null">
                workAge,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=CHAR},
            </if>
            <if test="birthday != null">
                #{birthday,jdbcType=DATE},
            </if>
            <if test="idCard != null">
                #{idCard,jdbcType=CHAR},
            </if>
            <if test="wedlock != null">
                #{wedlock,jdbcType=CHAR},
            </if>
            <if test="nationId != null">
                #{nationId,jdbcType=INTEGER},
            </if>
            <if test="nativePlace != null">
                #{nativePlace,jdbcType=VARCHAR},
            </if>
            <if test="politicId != null">
                #{politicId,jdbcType=INTEGER},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="departmentId != null">
                #{departmentId,jdbcType=INTEGER},
            </if>
            <if test="jobLevelId != null">
                #{jobLevelId,jdbcType=INTEGER},
            </if>
            <if test="posId != null">
                #{posId,jdbcType=INTEGER},
            </if>
            <if test="engageForm != null">
                #{engageForm,jdbcType=VARCHAR},
            </if>
            <if test="tiptopDegree != null">
                #{tiptopDegree,jdbcType=CHAR},
            </if>
            <if test="specialty != null">
                #{specialty,jdbcType=VARCHAR},
            </if>
            <if test="school != null">
                #{school,jdbcType=VARCHAR},
            </if>
            <if test="beginDate != null">
                #{beginDate,jdbcType=DATE},
            </if>
            <if test="workState != null">
                #{workState,jdbcType=CHAR},
            </if>
            <if test="workID != null">
                #{workID,jdbcType=CHAR},
            </if>
            <if test="contractTerm != null">
                #{contractTerm,jdbcType=DOUBLE},
            </if>
            <if test="conversionTime != null">
                #{conversionTime,jdbcType=DATE},
            </if>
            <if test="notWorkDate != null">
                #{notWorkDate,jdbcType=DATE},
            </if>
            <if test="beginContract != null">
                #{beginContract,jdbcType=DATE},
            </if>
            <if test="endContract != null">
                #{endContract,jdbcType=DATE},
            </if>
            <if test="workAge != null">
                #{workAge,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="org.yangsibao.vhr.model.Employee">
        update employee
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=CHAR},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=DATE},
            </if>
            <if test="idCard != null">
                idCard = #{idCard,jdbcType=CHAR},
            </if>
            <if test="wedlock != null">
                wedlock = #{wedlock,jdbcType=CHAR},
            </if>
            <if test="nationId != null">
                nationId = #{nationId,jdbcType=INTEGER},
            </if>
            <if test="nativePlace != null">
                nativePlace = #{nativePlace,jdbcType=VARCHAR},
            </if>
            <if test="politicId != null">
                politicId = #{politicId,jdbcType=INTEGER},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="departmentId != null">
                departmentId = #{departmentId,jdbcType=INTEGER},
            </if>
            <if test="jobLevelId != null">
                jobLevelId = #{jobLevelId,jdbcType=INTEGER},
            </if>
            <if test="posId != null">
                posId = #{posId,jdbcType=INTEGER},
            </if>
            <if test="engageForm != null">
                engageForm = #{engageForm,jdbcType=VARCHAR},
            </if>
            <if test="tiptopDegree != null">
                tiptopDegree = #{tiptopDegree,jdbcType=CHAR},
            </if>
            <if test="specialty != null">
                specialty = #{specialty,jdbcType=VARCHAR},
            </if>
            <if test="school != null">
                school = #{school,jdbcType=VARCHAR},
            </if>
            <if test="beginDate != null">
                beginDate = #{beginDate,jdbcType=DATE},
            </if>
            <if test="workState != null">
                workState = #{workState,jdbcType=CHAR},
            </if>
            <if test="workID != null">
                workID = #{workID,jdbcType=CHAR},
            </if>
            <if test="contractTerm != null">
                contractTerm = #{contractTerm,jdbcType=DOUBLE},
            </if>
            <if test="conversionTime != null">
                conversionTime = #{conversionTime,jdbcType=DATE},
            </if>
            <if test="notWorkDate != null">
                notWorkDate = #{notWorkDate,jdbcType=DATE},
            </if>
            <if test="beginContract != null">
                beginContract = #{beginContract,jdbcType=DATE},
            </if>
            <if test="endContract != null">
                endContract = #{endContract,jdbcType=DATE},
            </if>
            <if test="workAge != null">
                workAge = #{workAge,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.yangsibao.vhr.model.Employee">
        update employee
        set name = #{name,jdbcType=VARCHAR},
          gender = #{gender,jdbcType=CHAR},
          birthday = #{birthday,jdbcType=DATE},
          idCard = #{idCard,jdbcType=CHAR},
          wedlock = #{wedlock,jdbcType=CHAR},
          nationId = #{nationId,jdbcType=INTEGER},
          nativePlace = #{nativePlace,jdbcType=VARCHAR},
          politicId = #{politicId,jdbcType=INTEGER},
          email = #{email,jdbcType=VARCHAR},
          phone = #{phone,jdbcType=VARCHAR},
          address = #{address,jdbcType=VARCHAR},
          departmentId = #{departmentId,jdbcType=INTEGER},
          jobLevelId = #{jobLevelId,jdbcType=INTEGER},
          posId = #{posId,jdbcType=INTEGER},
          engageForm = #{engageForm,jdbcType=VARCHAR},
          tiptopDegree = #{tiptopDegree,jdbcType=CHAR},
          specialty = #{specialty,jdbcType=VARCHAR},
          school = #{school,jdbcType=VARCHAR},
          beginDate = #{beginDate,jdbcType=DATE},
          workState = #{workState,jdbcType=CHAR},
          workID = #{workID,jdbcType=CHAR},
          contractTerm = #{contractTerm,jdbcType=DOUBLE},
          conversionTime = #{conversionTime,jdbcType=DATE},
          notWorkDate = #{notWorkDate,jdbcType=DATE},
          beginContract = #{beginContract,jdbcType=DATE},
          endContract = #{endContract,jdbcType=DATE},
          workAge = #{workAge,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>