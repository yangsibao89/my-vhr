<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.yangsibao.vhr.mapper.MonthlySalaryMapper">
    <resultMap id="BaseResultMap" type="org.yangsibao.vhr.model.MonthlySalary">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="inmonth" property="inmonth" jdbcType="TIMESTAMP"/>
        <result column="ename" property="ename" jdbcType="VARCHAR"/>
        <result column="basicWage" property="basicwage"/>
        <result column="seniorityWage" property="senioritywage"/>
        <result column="positionWage" property="positionwage"/>
        <result column="performanceWage" property="performancewage"/>
        <result column="phoneAllowance" property="phoneallowance"/>
        <result column="trafficAllowance" property="trafficallowance"/>
        <result column="registAllowance" property="registallowance"/>
        <result column="registSupply" property="registsupply"/>
        <result column="rentAllowance" property="rentallowance"/>
        <result column="rentSupply" property="rentsupply"/>
        <result column="aloneAllowance" property="aloneallowance"/>
        <result column="aloneSupply" property="alonesupply"/>
        <result column="hui" property="hui"/>
        <result column="fire" property="fire"/>
        <result column="cool" property="cool"/>
        <result column="propertyAllowance" property="propertyallowance"/>
        <result column="warmAllowance" property="warmallowance"/>
        <result column="warmSupply" property="warmsupply"/>
        <result column="propertySupply" property="propertysupply"/>
        <result column="supply" property="supply"/>
        <result column="sickPersonalLeave" property="sickpersonalleave"/>
        <result column="sum" property="sum"/>
        <result column="pension" property="pension"/>
        <result column="largeMedical" property="largemedical"/>
        <result column="occupationalAnnuity" property="occupationalannuity"/>
        <result column="provident" property="provident"/>
        <result column="occupationalAnnuityDecuction" property="occupationalannuitydecuction"/>
        <result column="largeMedicalDeduction" property="largemedicaldeduction"/>
        <result column="pensionBack" property="pensionback"/>
        <result column="insuranceDeduction" property="insurancededuction"/>
        <result column="sumDeduction" property="sumdeduction"/>
        <result column="providentBack" property="providentback"/>
        <result column="providentDeduction" property="providentdeduction"/>
        <result column="member" property="member"/>
        <result column="individual" property="individual"/>
        <result column="actualSum" property="actualsum"/>
        <result column="agencySum" property="agencysum"/>
        <result column="deductionSum" property="deductionsum"/>
        <result column="repay" property="repay"/>
        <result column="actualWage" property="actualwage"/>
        <result column="addProvidentBack" property="addprovidentback"/>
        <result column="total" property="total"/>
        <result column="base" property="base"/>
        <result column="pensionPersonalPer" property="pensionpersonalper"/>
        <result column="pensionSumPer" property="pensionsumper"/>
        <result column="medicalPersonalPer" property="medicalpersonalper"/>
        <result column="medicalUnitPer" property="medicalunitper"/>
        <result column="medicalSumPer" property="medicalsumper"/>
        <result column="joblessPersonalPer" property="joblesspersonalper"/>
        <result column="joblessUnitPer" property="joblessunitper"/>
        <result column="joblessSumPer" property="joblesssumper"/>
        <result column="injury" property="injury"/>
        <result column="birth" property="birth"/>
        <result column="personalDeduction" property="personaldeduction"/>
        <result column="ilargeMedical" property="ilargemedical"/>
        <result column="unitSum" property="unitsum"/>
        <result column="month" property="month"/>
        <result column="pbase" property="pbase"/>
        <result column="per" property="per"/>
        <result column="personal" property="personal"/>
        <result column="unit" property="unit"/>
        <result column="pmonth" property="pmonth"/>
        <result column="back" property="back"/>
        <result column="ptotal" property="ptotal"/>
        <result column="bonus" property="bonus"/>
        <result column="allSalary" property="allsalary"/>

    </resultMap>

    <resultMap id="monthlySalaryWithEmployee" type="org.yangsibao.vhr.model.MonthlySalary" extends="BaseResultMap">
        <collection property="emps" ofType="org.yangsibao.vhr.model.Employee">
            <id column="id" property="id"/>
            <result column="ename" property="name"/>
            <association property="salaryFull" javaType="org.yangsibao.vhr.model.SalaryFull">
                <result column="basicWage" property="basicwage"/>
                <result column="seniorityWage" property="senioritywage"/>
                <result column="positionWage" property="positionwage"/>
                <result column="performanceWage" property="performancewage"/>
                <result column="phoneAllowance" property="phoneallowance"/>
                <result column="trafficAllowance" property="trafficallowance"/>
                <result column="registAllowance" property="registallowance"/>
                <result column="registSupply" property="registsupply"/>
                <result column="rentAllowance" property="rentallowance"/>
                <result column="rentSupply" property="rentsupply"/>
                <result column="aloneAllowance" property="aloneallowance"/>
                <result column="aloneSupply" property="alonesupply"/>
                <result column="hui" property="hui"/>
                <result column="fire" property="fire"/>
                <result column="cool" property="cool"/>
                <result column="propertyAllowance" property="propertyallowance"/>
                <result column="warmAllowance" property="warmallowance"/>
                <result column="warmSupply" property="warmsupply"/>
                <result column="propertySupply" property="propertysupply"/>
                <result column="supply" property="supply"/>
                <result column="sickPersonalLeave" property="sickpersonalleave"/>
                <result column="sum" property="sum"/>
                <result column="pension" property="pension"/>
                <result column="largeMedical" property="largemedical"/>
                <result column="occupationalAnnuity" property="occupationalannuity"/>
                <result column="provident" property="provident"/>
                <result column="occupationalAnnuityDecuction" property="occupationalannuitydecuction"/>
                <result column="largeMedicalDeduction" property="largemedicaldeduction"/>
                <result column="pensionBack" property="pensionback"/>
                <result column="insuranceDeduction" property="insurancededuction"/>
                <result column="sumDeduction" property="sumdeduction"/>
                <result column="providentBack" property="providentback"/>
                <result column="providentDeduction" property="providentdeduction"/>
                <result column="member" property="member"/>
                <result column="individual" property="individual"/>
                <result column="actualSum" property="actualsum"/>
                <result column="agencySum" property="agencysum"/>
                <result column="deductionSum" property="deductionsum"/>
                <result column="repay" property="repay"/>
                <result column="actualWage" property="actualwage"/>
                <result column="addProvidentBack" property="addprovidentback"/>
                <result column="total" property="total"/>
                <result column="base" property="base"/>
                <result column="pensionPersonalPer" property="pensionpersonalper"/>
                <result column="pensionSumPer" property="pensionsumper"/>
                <result column="medicalPersonalPer" property="medicalpersonalper"/>
                <result column="medicalUnitPer" property="medicalunitper"/>
                <result column="medicalSumPer" property="medicalsumper"/>
                <result column="joblessPersonalPer" property="joblesspersonalper"/>
                <result column="joblessUnitPer" property="joblessunitper"/>
                <result column="joblessSumPer" property="joblesssumper"/>
                <result column="injury" property="injury"/>
                <result column="birth" property="birth"/>
                <result column="personalDeduction" property="personaldeduction"/>
                <result column="ilargeMedical" property="ilargemedical"/>
                <result column="unitSum" property="unitsum"/>
                <result column="month" property="month"/>
                <result column="pbase" property="pbase"/>
                <result column="per" property="per"/>
                <result column="personal" property="personal"/>
                <result column="unit" property="unit"/>
                <result column="pmonth" property="pmonth"/>
                <result column="back" property="back"/>
                <result column="ptotal" property="ptotal"/>
                <result column="bonus" property="bonus"/>
                <result column="allSalary" property="allsalary"/>

            </association>
        </collection>
    </resultMap>


    <sql id="Base_Column_List">
    id, month
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from mon_es
        where id = #{id,jdbcType=INTEGER}
    </select>


    <select id="getMonthlySalaryByPage" resultMap="BaseResultMap">
        SELECT *
        from salary_month sm
        ORDER BY inmonth desc
        <if test=" page != null and size != null">
            limit #{page},#{size}
        </if>
    </select>

    <select id="getTotal" resultType="java.lang.Long">
    SELECT count(*)
    from salary_month sm
  </select>


    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from mon_es
    where id = #{id,jdbcType=INTEGER}
  </delete>

    <!--  , seniorityWage, positionWage,
          performanceWage, phoneAllowance, trafficAllowance,
          registAllowance, registSupply, rentAllowance,
          rentSupply, aloneAllowance, aloneSupply,
          hui, fire, cool, propertyAllowance,
          warmAllowance, warmSupply, propertySupply,
          supply, deduction, sickPersonalLeave,
          sum, pension, largeMedical,
          occupationalAnnuity, provident, occupationalAnnuityDecuction,
          largeMedicalDeduction, pensionBack, insuranceDeduction,
          sumDeduction, providentBack, providentDeduction,
          member, individual, actualSum,
          agencySum, deductionSum, repay,
          actualWage, addProvidentBack, total,
          base, pensionPersonalPer, pensionUnitPer,
          pensionSumPer, medicalPersonalPer, medicalUnitPer,
          medicalSumPer, joblessPersonalPer, joblessUnitPer,
          joblessSumPer, injury, birth,
          personalDeduction, ilargeMedical, unitSum,
          month, pbase, per,
          personal, unit, pmonth,
          back, ptotal, bonus,
          allSalary-->
    <insert id="insert" parameterType="org.yangsibao.vhr.model.MonthlySalary">
        insert into salary_month (inmonth, ename,
        basicWage, seniorityWage, positionWage,
        performanceWage, phoneAllowance, trafficAllowance,
        registAllowance, registSupply, rentAllowance,
        rentSupply, aloneAllowance, aloneSupply,
        hui, fire, cool, propertyAllowance,
        warmAllowance, warmSupply, propertySupply,
        supply, deduction, sickPersonalLeave,
        sum, pension, largeMedical,
        occupationalAnnuity, provident, occupationalAnnuityDecuction,
        largeMedicalDeduction, pensionBack, insuranceDeduction,
        sumDeduction, providentBack, providentDeduction,
        member, individual, actualSum,
        agencySum, deductionSum, repay,
        actualWage, addProvidentBack, total,
        base, pensionPersonalPer, pensionUnitPer,
        pensionSumPer, medicalPersonalPer, medicalUnitPer,
        medicalSumPer, joblessPersonalPer, joblessUnitPer,
        joblessSumPer, injury, birth,
        personalDeduction, ilargeMedical, unitSum,
        month, pbase, per,
        personal, unit, pmonth,
        back, ptotal, bonus, allSalary)
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{inmonth},#{emp.name},#{emp.salaryFull.basicwage},#{emp.salaryFull.senioritywage},#{emp.salaryFull.positionwage},
            #{emp.salaryFull.performancewage},#{emp.salaryFull.phoneallowance},#{emp.salaryFull.trafficallowance},#{emp.salaryFull.registallowance},#{emp.salaryFull.registsupply},
            #{emp.salaryFull.rentallowance},#{emp.salaryFull.rentsupply},#{emp.salaryFull.aloneallowance},
            #{emp.salaryFull.alonesupply},#{emp.salaryFull.hui},#{emp.salaryFull.fire},#{emp.salaryFull.cool},#{emp.salaryFull.propertyallowance},
            #{emp.salaryFull.warmallowance},#{emp.salaryFull.warmsupply},#{emp.salaryFull.propertysupply},#{emp.salaryFull.supply},#{emp.salaryFull.deduction},
            #{emp.salaryFull.sickpersonalleave},#{emp.salaryFull.sum},#{emp.salaryFull.pension},#{emp.salaryFull.largemedical},#{emp.salaryFull.occupationalannuity},
            #{emp.salaryFull.provident},#{emp.salaryFull.occupationalannuitydecuction},#{emp.salaryFull.largemedicaldeduction},#{emp.salaryFull.pensionback},#{emp.salaryFull.insurancededuction},
            #{emp.salaryFull.sumdeduction},#{emp.salaryFull.providentback},#{emp.salaryFull.providentdeduction},#{emp.salaryFull.member},#{emp.salaryFull.individual},
            #{emp.salaryFull.actualsum},#{emp.salaryFull.agencysum},#{emp.salaryFull.deductionsum},#{emp.salaryFull.repay},#{emp.salaryFull.actualwage},
            #{emp.salaryFull.addprovidentback},#{emp.salaryFull.total},#{emp.salaryFull.base},#{emp.salaryFull.pensionpersonalper},#{emp.salaryFull.pensionunitper},
            #{emp.salaryFull.pensionsumper},#{emp.salaryFull.medicalpersonalper},#{emp.salaryFull.medicalunitper},#{emp.salaryFull.medicalsumper},#{emp.salaryFull.joblesspersonalper},
            #{emp.salaryFull.joblessunitper},#{emp.salaryFull.joblesssumper},#{emp.salaryFull.injury},#{emp.salaryFull.birth},#{emp.salaryFull.personaldeduction},
            #{emp.salaryFull.ilargemedical},#{emp.salaryFull.unitsum},#{emp.salaryFull.month},#{emp.salaryFull.pbase},#{emp.salaryFull.per},
            #{emp.salaryFull.personal},#{emp.salaryFull.unit},#{emp.salaryFull.pmonth},#{emp.salaryFull.back},#{emp.salaryFull.ptotal},
            #{emp.salaryFull.bonus},#{emp.salaryFull.allsalary}
            )
        </foreach>
    </insert>
    <insert id="insertSelective" parameterType="org.yangsibao.vhr.model.MonthlySalary">
        insert into mon_es
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="month != null">
                month,
            </if>
            <if test="esid != null">
                eid,
            </if>
            <if test="sid != null">
                sid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="month != null">
                #{month,jdbcType=TIMESTAMP},
            </if>
            <if test="esid != null">
                #{eid,jdbcType=INTEGER},
            </if>
            <if test="sid != null">
                #{sid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>


    <update id="updateByPrimaryKeySelective" parameterType="org.yangsibao.vhr.model.MonthlySalary">
        update mon_es
        <set>
            <if test="month != null">
                month = #{month,jdbcType=TIMESTAMP},
            </if>
            <if test="esid != null">
                eid = #{eid,jdbcType=INTEGER},
            </if>
            <if test="sid != null">
                sid = #{sid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="org.yangsibao.vhr.model.MonthlySalary">
    update mon_es
    set month = #{month,jdbcType=TIMESTAMP},
      eid = #{eid,jdbcType=INTEGER},
      sid = #{sid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>